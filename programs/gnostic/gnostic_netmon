#!/usr/bin/perl -w


use strict;
use Getopt::Long;
use Stuff::Debug qw(&db_out);
use Stuff::Usage qw(&usage &long_usage &version_message);
use Stuff::Gnostic;
use Stuff::ExpirySet;
use Stuff::StatSet;
use Time::HiRes qw(usleep);

use constant STUFF_PROG_DESCRIPTION => "Gnostic network traffic monitor";
use constant STUFF_PROG_COPYRIGHT   => "(C) XXXX; released under the GNU GPL version 2";
use constant STUFF_PROG_VERSION     => "0.01";
use constant STUFF_PROG_AUTHOR      => "Matthew Gates";

BEGIN {
    db_out(1, "program starting");
}

END {
    db_out(1, "program exiting with status " . ($? || 0));
}

my $gs_filter;
my $gs_update_seconds = 0.5;
my $gs_average_life   = 60;

GetOptions(
	   'average-life=i'    => \$gs_average_life,
	   'help'              => sub { long_usage(0) },
	   'iface=s'           => \$gs_filter,
	   'version'           => sub { version_message(); exit 0; },
	   'debug=i'           => \$Stuff::Debug::debug_level{S},
	   'update=f'          => \$gs_update_seconds,
	   )     or usage(1);

my %averages;
my $g = Stuff::Gnostic->new();

my %lv = getval();

while(1) {
    usleep(1000000*$gs_update_seconds);
    my %vals = getval();
    foreach my $iface (keys %{$vals{'dev'}}) {
	my $timeslice = $vals{'time'} - $lv{'time'};
        my $in = ($vals{'dev'}{$iface}{'in'} - $lv{'dev'}{$iface}{'in'}) / $timeslice;
        my $out = ($vals{'dev'}{$iface}{'out'} - $lv{'dev'}{$iface}{'out'}) / $timeslice;

	foreach my $dir (qw(in out)) {
		if (!defined($averages{$iface}{$dir})) {
			$averages{$iface}{$dir} = Stuff::ExpirySet->new('Life'=>$gs_average_life);
		}
        }

	$averages{$iface}{'in'}->add($in);
	$averages{$iface}{'out'}->add($out);
	
	print $g->item("$iface in", $in);
	print $g->item("$iface out", $out);
	print $g->item("$iface avg in",  Stuff::StatSet->new($averages{$iface}{'in'}->data())->mean());
	print $g->item("$iface avg out",  Stuff::StatSet->new($averages{$iface}{'out'}->data())->mean());
    }
    %lv = %vals;
}

sub getval {
    my %v;
    my $s = 0;
    $v{'time'} = Time::HiRes::time;
    foreach (split("\n", `cat /proc/net/dev`)) {
        if ($s<2) { $s++; next; }
	s/^\s+//;
	my @a = split(/[\s:]+/);
 	my $iface = $a[0];

	my $want = 1;
	if (defined($gs_filter)) {
	    if ($iface !~ /$gs_filter/) { $want = 0; }
	}

	if ($want) {
	    $v{'dev'}{$iface}{'in'}  = $a[1] || 0;
	    $v{'dev'}{$iface}{'out'} = $a[9] || 0;
	}
    }
    return %v;
}

exit(0);

__END__

=head1 NAME 

gnostic_netmon - gather network traffic data and format for input to Gnostic

=head1 SYNOPSIS

gnostic_netmon [options]

=head1 DESCRIPTION

This program gathers network traffic statistics and outputs them in a format 
suitable for input to the Gnostic data visualization tool.

=head1 OPTIONS

=over

=item B<--debug>=I<level>

Print diagnostic messages while executing.  The value of I<level> must be an
integer.  The higher the number, the more verbose the diagnostic output will
be.

=item B<--help>

Print the command line syntax an option details.

=item B<--iface>=I<re>

FIlter interfaces so that only those matching the regular expression I<re>
are displayed.

=item B<--update>=I<s>

Set the update delay to I<s> seconds.

=item B<--version>

Print the program description and version.

=back

=head1 ENVIRONMENT

=over

=item STUFF_?_DBLEVEL

Sets debugging levels.  The ? can be D for database, M for module,
or S for script debugging messages.  Generally only S and D are
interesting for users, M is mostly just used during development.

=back

=head1 FILES

=over

=item filename

desc

=back

=head1 LICENSE

gnostic_netmon is released under the GNU GPL (version 3, 29 June 2007).  A
copy of the license should have been provided in the distribution of
the software in a file called "LICENSE.GPL".  If you can't find this, then
try here: http://www.gnu.org/copyleft/gpl.html

=head1 AUTHOR

Matthew Gates <matthew@porpoisehead.net>

http://porpoisehead.net/

=head1 CHANGELOG

=over

=item Date:YYYY-MM-DD Created, Author MNG

Original version.

=back

=head1 BUGS

Please report bugs to the author.

=head1 SEE ALSO

See http://porpoisehead.net/mysw/gnostic for more information about Gnostic.

=cut

