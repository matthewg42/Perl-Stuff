#!/usr/bin/perl -w
#
# Checks if and file systems are over some threshold value, and sends a 
# warning email if they are.  Run from cron.
#


use strict;
use Getopt::Long;
use File::Basename;
use vars qw($VERSION $PROGDESC $AUTHOR);
require Mail::Send;

my $gs_send_to   = get_default_address();
my $gs_threshold = 90; 
my $gs_send_mail = 1;
my $gs_excludes  = "/mnt/cdrom,/mnt/sda1";

use constant STUFF_PROG_DESCRIPTION => "Filesystem Checker";
use constant STUFF_PROG_COPYRIGHT   => "(C) 2003; released under the GNU GPL version 2";
use constant STUFF_PROG_VERSION     => "0.01";
use constant STUFF_PROG_AUTHOR      => "Matthew Gates";

GetOptions(
	   'exclude=s'         => \$gs_excludes,
	   'help'              => sub { system("pod2usage --verbose=2 $0"); exit 0; },
	   'mail!'             => \$gs_send_mail,
	   'send-to=s'         => \$gs_send_to,
	   'threshold=i'       => \$gs_threshold,
	   'version'           => sub { print &STUFF_PROG_DESCRIPTION . " by " . &STUFF_PROG_AUTHOR . "\n" . &STUFF_PROG_VERSION . "\n"; },
	   )     or usage();

open(DF, "df -k|") || die "cannot run \"df -k\": $!";

my $gs_number_warnings = 0;
my $gs_warning_text = "";
my @ga_excludes = split(/,/, $gs_excludes);

while(<DF>) {
    if ( $. > 1 ) {
	chomp;
	my ($device, $size, $used, $available, $percent_use, $mounted_on) = split(/\s+/, $_, 6);
        my $to_exclude = 0;

	foreach my $ed (@ga_excludes) {
	    if ( $mounted_on eq $ed || $device eq $ed ) {
		$to_exclude = 1;
		last;
            }
	}

	chop $percent_use;   # remove % symbol
	if ( $percent_use > $gs_threshold && ! $to_exclude ) {
	    $gs_number_warnings++;
	    $gs_warning_text .= sprintf("Filesystem at %d%%: %-15s mounted on   %s\n", 
					$percent_use,
					$device, 
					$mounted_on);
	}
    }
}

close DF;

if ( $gs_number_warnings > 0 ) {
    do_warnings();
}

exit 0;


################
# sub routines #
################

sub get_default_address {
    my $user = `whoami`;
    my $host = `hostname`;
    chomp $user;
    chomp $host;

    return "$user" . '@' . "$host";
}

sub usage {
    system("pod2usage $0"); 
    exit 1;
}

sub do_warnings {
    my $subject = "Disk Usage WARNING";
    my $body    = "Warning, $gs_number_warnings of you devices are over $gs_threshold% usage:\n\n";
    $body .= $gs_warning_text;

    if ( $gs_send_mail ) {
	my $msg = new Mail::Send;
	$msg->to($gs_send_to);
	$msg->subject($subject);
	my $fh = $msg->open || die "Cannot open handler to mail program: $!";
	print $fh $body;
	$fh->close;
    }
    else  {
	print "To: $gs_send_to\n";
	print "Subject: $subject\n\n";
	print $body;
    }
}

__END__

=head1 NAME 

fs_check - check filesystems and mail warning to user if required

=head1 SYNOPSIS

fs_check [options]

=head1 DESCRIPTION

Checks filesystems and reports those whose usage is more than some
threshold (90%).  The result is mailed to the user that called the program
as identified by `whoami`@`hostname`.  This may be over-ridden using
the B<--send-to> option.

The intention is for the program to be called from cron periodically,
the user will then get a warning if their filesystems are filling up.

=head1 OPTIONS

=over

=item B<--exclude>=I<csv>

Exclude filesystems in comma separated value list, I<csv>.  This list
may contain mount points and/or device names, e.g.

    /dev/hda2,/mnt/cdrom

By default /mnt/cdrom and /mnt/sda1 (cdrom and mass-storage device)
are excluded from the check.

=item B<--debug>=I<level>

Print diagnostic messages while executing.  The value of I<level> must
be an integer.  The higher the number, the more verbose the diagnostic
output will be.

=item B<--help>

Print the command line syntax an option details.

=item B<--mail> or B<--nomail>

B<--mail> can be used to explicitly say that the output should be
mailed (which is the default anyway).  B<--nomail> will cause the
output to be sent to standard otput instead of a mail message.

=item B<--send-to>=I<address>

Sends the warning message to I<address> instead of the default
`whoami`@`hostname`.

=item B<--version>

Print the program description and version.

=back

=head1 ENVIRONMENT

N/A

=head1 FILES

N/A

=head1 LICENSE

fs_check is released under the GNU GPL (version 2, June 1991).  A
copy of the license should have been provided in the distribution of
the software in a file called "LICENSE".  If you can't find this, then
try here: http://www.gnu.org/copyleft/gpl.html

=head1 AUTHOR

Matthew Gates <matthew@porpoisehead.net>

http://porpoisehead.net/

=head1 CHANGELOG

=over

=item Date:2005-03-09 Enhancement, Author MNG

Added <--exclude> option and added some missing documentation.

=item Date:2005-02-25 Created, Author MNG

Original version.

=back

=head1 BUGS

Please report bugs to the author.

=head1 SEE ALSO

df(1), mailx(1).

=cut

