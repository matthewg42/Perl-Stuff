#!/usr/bin/perl -w
#

use strict;
use Getopt::Long;
use Text::Abbrev;
use Stuff::Debug    qw(db_out);
use Stuff::Usage    qw(usage long_usage version_message);
use Stuff::ByteSize qw(bytes2sz);
use Stuff::StatSet;

use constant STUFF_PROG_DESCRIPTION => "sum numerical values and perform aggregate functions";
use constant STUFF_PROG_COPYRIGHT   => "(C) 2003; released under the GNU GPL version 2";
use constant STUFF_PROG_VERSION     => "0.02";
use constant STUFF_PROG_AUTHOR      => "Matthew Gates";

BEGIN {
    db_out(1, "program starting");
}

END {
    db_out(1, "program exiting with status " . ($? || 0));
}

# This is the list of operations.  unambigious abbreviations to the
# --operation can be used, so we'll use the abbrev function from
# Text::Abbrev for generating a hash where the keys are all possible
# unambigious abbreviations, and the keys are the original operation
# names.  

my %gh_operation_abbrevs = abbrev qw(sum minimum maximum mean median average count all);

# This object is used to do the statistical calculation.
my $go_numbers = Stuff::StatSet->new();

# Now for some command line option flag variables.
my $gs_flag_size = 0;
my $gs_flag_precision = 1;
my $gs_flag_operation = "sum";
my $gs_flag_stdin = 0;

GetOptions(
	   'precision=i'       => \$gs_flag_precision,
	   'size'              => \$gs_flag_size,
	   'bytes'             => sub { $gs_flag_size = 0 },
	   'operation=s'       => \$gs_flag_operation,
	   'stdin'             => \$gs_flag_stdin,
	   'help'              => sub { long_usage(0) },
	   'version'           => sub { version_message(); exit 0; },
	   'debug=i'           => \$Stuff::Debug::debug_level{S},
	   )     or usage(1);



# OK, call the read loop.  This parses ARGV for parameters, and then
# reads from stdin until there is no more.  The resulting numbers are
# inserted into $go_numbers by the do_read_loop function.

do_check_operation();
do_read_parameters();
do_read_input();
do_output();


##############################################################################
# Sub-routines
##############################################################################

sub do_check_operation
{
    my $op = $gs_flag_operation;
 
    if ( ! defined( $gh_operation_abbrevs{$op} ) )
    {
	db_out(0, "do_check_operation: The operation you specified \"$op\" isn't known or is not an unambibious abbreviation of a known operation.  I will use the default, which is \"sum\".");
	$gs_flag_operation = "mean";
    }
    else
    {
	$gs_flag_operation = $gh_operation_abbrevs{$op};
	db_out(3,"operation recognized: $op ==> $gs_flag_operation");
    }
}

sub do_read_parameters
{
    foreach my $param (@ARGV)
    {
	if ( is_numeric($param) )
	{
	    $go_numbers->add_members($param);
	}
	else
	{
	    db_out(0,"Command line parameter $param is non-numeric -- will ignore it");
	}
    }
}

sub do_read_input
{
    if ( $go_numbers->count <= 0 && ! $gs_flag_stdin ) 
    {
	# db_out(0,"do_read_input: no command line parameters used, will take input from stdin.  Use --stdin switch to suppress this warning");
    }
    else {
	if ( ! $gs_flag_stdin ) 
	{
	    db_out(3,"do_read_input: command line parameters were used, will not read from stdin without --stdin switch");
	    return;
	}
	else
	{
	    db_out(3,"do_read_input: command line parameters were used, but --stdin switch was used, so I'll read from stdin as well...");
	}
    }

    while(<STDIN>) 
    {
	chop;
	foreach my $word (split(/\s+/, $_))
	{
	    db_out(9,"considering word $word");
	    
	    if ( is_numeric($word) )
	    {
		$go_numbers->add_members($word);
	    }
	    else
	    {
		db_out(8, "rejecting word \"$word\" -- it is not numeric (enough!)");
	    }
	    
	}
	
    }
}

sub is_numeric 
{
    my $i = shift;

    if (     $i =~ /^\d+$/ 
	  || $i =~ /^\d+\.\d*$/   
	  || $i =~ /^\d*\.\d+$/
	     ) {
	return 1;
    }
    else
    {
	return 0;
    }
}

sub do_output
{
    my $result;

    if ( $gs_flag_operation eq "sum" )
    {
	$result = $go_numbers->sum;
    }
    elsif ( $gs_flag_operation eq "minimum" )
    {
	$result = $go_numbers->min;
    }
    elsif ( $gs_flag_operation eq "maximum" )
    {
	$result = $go_numbers->max;
    }
    elsif ( $gs_flag_operation eq "mean" || $gs_flag_operation eq "average")
    {
	$result = $go_numbers->mean;
    }
    elsif ( $gs_flag_operation eq "median" )
    {
	$result = $go_numbers->median;
    }
    elsif ( $gs_flag_operation eq "count" )
    {
	$result = $go_numbers->count;
    }
    elsif ( $gs_flag_operation eq "all" )
    {
	do_all_operations();
	return;
    }
    else
    {
	db_out(0, "do_result: erk, operation \"$gs_flag_operation\" is not known, ABORTING");
	exit 2;
    }

    db_out(5, "result of operation $gs_flag_operation is $result");

    if ( ! $gs_flag_size ) 
    {
	print $result . "\n";
    }
    else
    {
	print bytes2sz($result, "%.${gs_flag_precision}f") . "\n";
    }
    
}

sub do_all_operations
{
    foreach my $op (qw (sum count minimum maximum mean median)) 
    {
	printf "%-10s ", $op;
	$gs_flag_operation = $op;
	do_output();
    }
}

sub nop_print 
{
    sprintf @_;
}

__END__

=head1 NAME 

sumup - sum, min, max of numerical values

=head1 SYNOPSIS

sumup [options]

=head1 DESCRIPTION

sumup reads parameters from the command line or stdin if no command
line parameters are specified (or in addition to the command line if
B<--stdin> switch is used), and prints the sum of any numerical values
found. Non-numerical values are ignored.

Options allow for printing of statistical measurements based on the
sum, e.g. mean, min, max and such.  It is also possible to print thee
results as a byte size.  See the B<--size> option details for more
info.

=head1 OPTIONS

=over

=item B<--help>

Print the command line syntax an option details.

=item B<--version>

Print the program identification and version number.

=item B<--debug>=I<level>

Set the script debugging level to I<level>.  This switch sets all
types of debugging to this level.  If you want to discriminate between
the various debugging types (MOdule, DBase, SCript), you should set
the relevant environment variables instead of using this option.

=item B<--size>

Print the results in "ByteSize" style (i.e. < 1000 KiB, MiB, GiB etc.)
See the Stuff::ByteSize document for full details.  

=item B<--bytes>

Over-ride a B<--size> closer to the beginning of the command line.
This allows aliases to be set which use --size, but can then use an
additional -B<--bytes> switch to over-ride the alias default.

=item B<--operation>=I<mean|minimum|maximum|sum|average|count|all>

Choose which operation to perform on the input data-set.  The default
is I<sum>.  If I<all> is chosen, each operation will be printed on a
line by itself with the name of the operation at the beginning of the
line.  No guarentee is given as to the order.  This option is only
recommended from the command line since the output is not very easy to
parse and may change format in future versions.  I<average> is a
synonym for "mean".  You can abbreviate the operation name to the an
unambigious abbreviation string, e.g. "mi" for I<minimum>, or "max" for
I<maximum>.

=head1 ENVIRONMENT

=over

=item STUFF_??_DBLEVEL

Sets debugging levels.  The ?? can be DB for database, MO for module,
or SC for script debugging messages.  Generally only SC and DB are
interesting for users, MO is mostly just used during development.

=back

=head1 FILES

N/A

=head1 LICENSE

sumup is released under the GNU GPL (version 2, June 1991).

=head1 AUTHOR

Matthew Gates

=head1 CHANGELOG

=over

=item Date:2003-06-12 Created, Author MNG

Original version.

=back

=head1 BUGS

Please report bugs using L<mng_bug_report>.

=head1 FUTURE DEVELOPMENT

Possible addition of standard deviation to operations list.

=head1 SEE ALSO

L<Stuff::ByteSize>, ls(1)

=cut

